Fast and efficient logging:
- Generate events at specific locations in the code
- Extract parameters for later analysis
- Application specific or system wide
LTTng Advantages
Fast kernel tracing
Fast user-space tracing 
Native support for C/C++ applications, agent for Java and Python
Multi-arch
Ability to merge kernel and user-space traces
Standart trace format(Common Trace Format)
Packed by the major distributions
Time-based or size-based auto-routatuin available
Snapshots Usecase

Disk and Streaming Modes
$ lttng create #for streaming -U net
$ lttng enable-event -k -a # All kernel event
$ lttng enable-event -u -a #All user-space event

$ lttng stop/viewe/destroy

Viewers
babeltrace
lttngtop
Eclipse lttng plugin


Common profiling tolls on Linux
  - perf
  - oprofile
  - gprof
Trace Analysis
1. babeltrace
- Text based CTF viewer
- Default viewer for lttng view command

2. TraceCompass
-Most detailied and feature rich viewer
- Eclipse IDE integration or RCP app
- Live and remote trace views
-Control flow view, histograms, event list, trace statistics CPU/resource allocation
- Mix kernel and userspace trace analysis
Trace and Monitoring Framework(TMF in Eclipse)

Lttng-UST How does it work
Users instrument their applications with static trace points
liblttng-ust, in process library, dynamically linked with application
session setup, etc
Run app, collect traces
Post analysis with viewers
===========================================================
$ lttng create // session setup
$ lttng enable-event -u -a  //User-space event enabling
$ lttng start    // start tracing
============================0000000
Tracing session example 
$ lttng create
$ lttng enable-event -u subsys1_*
$ lttng enable-event -u subsys42
$ lttng start
get(coffee);
$ lttng stop 
$ lttng view




